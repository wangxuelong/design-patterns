OO基础
	抽象
	封装
	多态
	继承
	
OO原则
	封装变化
	多用组合，少用继承
	针对接口编程，不针对实现编程
	为交互对象之间的松耦合设计而努力
	对扩展开放，对修改关闭
	依赖抽象，不要依赖具体类。
	类应该只有一个改变的理由
	
OO模式
	策略模式：strategy-pattern
		定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立与使用算法的客户。
	观察者模式：observer-pattern
		在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。
	装饰者模式：decorate-pattern
		动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。
	工厂方法模式：factory-parttern
		定义了一个创建对象的接口，但由之类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
	抽象工厂模式：factory-parttern
		提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
	命令模式：command-pattern
		将请求封装成对象，这可以让你使用不同的请求、队列，或者日志请求来参数化其他对象。命令模式也可以支持撤销操作。
	迭代器模式：iterator-pattern
		提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
	组合模式：composite-pattern
		允许你将对象组成树形结构来表现“整体/部分”的层次结构。组合能让客户以一致的方式处理个别对象和对象组合。
	代理模式：proxy-pattern
		为另一个对象提供一个替身或占位符以访问这个对象


	